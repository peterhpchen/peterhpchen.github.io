---
import Icon from "./Icon.astro";
---

<theme-toggle>
  <button
    class="flex cursor-pointer rounded-[999rem] border-0 bg-[var(--gray-999)] p-0"
  >
    <span
      class="absolute -m-px h-px w-px overflow-hidden whitespace-nowrap border-0 p-0 clip-path-inset-[0_100%_100%_0]"
      >Dark theme</span
    >
    <span
      class="icon light relative z-[1] flex h-8 w-8 p-2 text-[length:1rem] text-[color:var(--accent-overlay)] before:absolute before:inset-0 before:z-[-1] before:rounded-[999rem] before:bg-[color:var(--accent-regular)]"
    >
      <Icon icon="sun" />
    </span>
    <span
      class="icon dark relative z-[1] flex h-8 w-8 p-2 text-[length:1rem] text-[color:var(--accent-overlay)]"
      ><Icon icon="moon-stars" /></span
    >
  </button>
</theme-toggle>

<style>
  button {
    box-shadow: inset 0 0 0 1px var(--accent-overlay);
  }

  :global(.theme-dark) .icon.light::before {
    transform: translateX(100%);
  }

  :global(.theme-dark) .icon.dark,
  :global(html:not(.theme-dark)) .icon.light,
  button[aria-pressed="false"] .icon.light {
    color: var(--accent-text-over);
  }

  @media (prefers-reduced-motion: no-preference) {
    .icon,
    .icon.light::before {
      transition: transform var(--theme-transition),
        color var(--theme-transition);
    }
  }

  @media (forced-colors: active) {
    .icon.light::before {
      background-color: SelectedItem;
    }
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector("button")!;

      /** Set the theme to dark/light mode. */
      const setTheme = (dark: boolean) => {
        document.documentElement.classList[dark ? "add" : "remove"](
          "theme-dark"
        );
        button.setAttribute("aria-pressed", String(dark));
      };

      // Toggle the theme when a user clicks the button.
      button.addEventListener("click", () => setTheme(!this.isDark()));

      // Initialize button state to reflect current theme.
      setTheme(this.isDark());
    }

    isDark() {
      return document.documentElement.classList.contains("theme-dark");
    }
  }
  customElements.define("theme-toggle", ThemeToggle);
</script>
